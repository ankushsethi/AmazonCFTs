{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "AWS CloudFormation Sample Template EC2InstanceWithSecurityGroupSample: Create an Amazon EC2 instance running the Amazon Linux AMI.",
	"Parameters": {
		"KeyName": {
			"Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
			"Type": "AWS::EC2::KeyPair::KeyName",
			"Default": "PWC_AWS",
			"ConstraintDescription": "must be the name of an existing EC2 KeyPair."
		},
		"InstanceType": {
			"Description": "WebServer EC2 instance type",
			"Type": "String",
			"Default": "t2.micro",
			"AllowedValues": [
				"t2.micro"
			],
			"ConstraintDescription": "must be a valid EC2 instance type."
		},
		"vpc": {
      			"Type": "AWS::EC2::VPC::Id",
      			"Default" : "vpc-f7dee49e",
      			"ConstraintDescription": "Must be an existing VPC within working region."
    		},
    		"subnet": {
      			"Description": "SubnetID of existing subnet for Automation Host",
      			"Type": "AWS::EC2::Subnet::Id",
      			"Default" : "subnet-591b6014",
    			"ConstraintDescription": "Must be an existing subnet"
    		},
		"SSHLocation": {
			"Description": "The IP address range that can be used to SSH to the EC2 instances",
			"Type": "String",
			"MinLength": "9",
			"MaxLength": "18",
			"Default": "0.0.0.0/0",
			"AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
			"ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
		}
	},
	"Mappings": {
		"AWSInstanceType2Arch": {
			"t2.micro": {
				"Arch": "HVM64"
			}
		},
		"AWSRegionArch2AMI": {
			"ap-south-1": {
				"HVM64": "ami-4fc58420"
			}
		}
	},
	"Resources": {
		"EC2Instance": {
			"Type": "AWS::EC2::Instance",
			"Properties": {
				"InstanceType": {
					"Ref": "InstanceType"
				},
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": [
							"\n",
							[
								"#!/bin/bash",
								"#cloud-init is run as run as root so need to change dirs/permissions/etc",
								"sudo yum install -y docker",
								"sudo service docker start",
								"sudo usermod -a -G docker ec2-user",
								"sudo yum install -y git",
								"sudo yum install -y python-pip",
								"sudo pip install docker-compose",
								"cd /home/ec2-user",
								"sudo git clone https://github.com/ankushsethi/TestCFT.git",
								"sudo sleep 120",
								"cd /home/ec2-user/TestCFT/prometheus",
								"docker-compose -f docker-compose.yml up -d",
								"sudo sleep 120",
								"cd /home/ec2-user/TestCFT/docker-compose",
								"docker-compose -f docker-compose.yml up -d"
							]
						]
					}
				},
				"SecurityGroups": [
					{
						"Ref": "InstanceSecurityGroup"
					}
				],
				"KeyName": {
					"Ref": "KeyName"
				},
				"ImageId": {
					"Fn::FindInMap": [
						"AWSRegionArch2AMI",
						{
							"Ref": "AWS::Region"
						},
						{
							"Fn::FindInMap": [
								"AWSInstanceType2Arch",
								{
									"Ref": "InstanceType"
								},
								"Arch"
							]
						}
					]
				}
			}
		},
		"InstanceSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Enable SSH access via port 22",
				"SecurityGroupIngress": [
					{
						"IpProtocol": "tcp",
						"FromPort": "22",
						"ToPort": "22",
						"CidrIp": {
							"Ref": "SSHLocation"
						}
					}
				]
			}
		}
	},
	"Outputs": {
		"InstanceId": {
			"Description": "InstanceId of the newly created EC2 instance",
			"Value": {
				"Ref": "EC2Instance"
			}
		},
		"AZ": {
			"Description": "Availability Zone of the newly created EC2 instance",
			"Value": {
				"Fn::GetAtt": [
					"EC2Instance",
					"AvailabilityZone"
				]
			}
		},
		"PublicDNS": {
			"Description": "Public DNSName of the newly created EC2 instance",
			"Value": {
				"Fn::GetAtt": [
					"EC2Instance",
					"PublicDnsName"
				]
			}
		},
		"PublicIP": {
			"Description": "Public IP address of the newly created EC2 instance",
			"Value": {
				"Fn::GetAtt": [
					"EC2Instance",
					"PublicIp"
				]
			}
		}
	}
}